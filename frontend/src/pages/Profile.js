import React, { useState } from 'react';
import { useMutation, useQueryClient } from 'react-query';
import { User, Star, Edit3, Save, X } from 'lucide-react';
import toast from 'react-hot-toast';

import { useAuth } from '../contexts/AuthContext';
import { userAPI } from '../services/api';

const Profile = () => {
  const { user, updateUser } = useAuth();
  const queryClient = useQueryClient();
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    first_name: user?.first_name || '',
    zodiac_sign: user?.zodiac_sign || ''
  });

  const updateProfileMutation = useMutation(userAPI.updateProfile, {
    onSuccess: (data) => {
      updateUser(data.data);
      setIsEditing(false);
      toast.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
      queryClient.invalidateQueries('user');
    },
    onError: (error) => {
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
  });

  const handleSave = () => {
    if (!editForm.first_name.trim()) {
      toast.error('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    updateProfileMutation.mutate(editForm);
  };

  const handleCancel = () => {
    setEditForm({
      first_name: user?.first_name || '',
      zodiac_sign: user?.zodiac_sign || ''
    });
    setIsEditing(false);
  };

  const getZodiacEmoji = (sign) => {
    const emojis = {
      aries: '‚ôà', taurus: '‚ôâ', gemini: '‚ôä', cancer: '‚ôã',
      leo: '‚ôå', virgo: '‚ôç', libra: '‚ôé', scorpio: '‚ôè',
      sagittarius: '‚ôê', capricorn: '‚ôë', aquarius: '‚ôí', pisces: '‚ôì'
    };
    return emojis[sign] || '‚ùì';
  };

  const getZodiacTitle = (sign) => {
    const titles = {
      aries: '–û–≤–µ–Ω', taurus: '–¢–µ–ª–µ—Ü', gemini: '–ë–ª–∏–∑–Ω–µ—Ü—ã', cancer: '–†–∞–∫',
      leo: '–õ–µ–≤', virgo: '–î–µ–≤–∞', libra: '–í–µ—Å—ã', scorpio: '–°–∫–æ—Ä–ø–∏–æ–Ω',
      sagittarius: '–°—Ç—Ä–µ–ª–µ—Ü', capricorn: '–ö–æ–∑–µ—Ä–æ–≥', aquarius: '–í–æ–¥–æ–ª–µ–π', pisces: '–†—ã–±—ã'
    };
    return titles[sign] || '–ù–µ –≤—ã–±—Ä–∞–Ω';
  };

  const zodiacSigns = [
    { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞' },
    { value: 'aries', label: '‚ôà –û–≤–µ–Ω' },
    { value: 'taurus', label: '‚ôâ –¢–µ–ª–µ—Ü' },
    { value: 'gemini', label: '‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã' },
    { value: 'cancer', label: '‚ôã –†–∞–∫' },
    { value: 'leo', label: '‚ôå –õ–µ–≤' },
    { value: 'virgo', label: '‚ôç –î–µ–≤–∞' },
    { value: 'libra', label: '‚ôé –í–µ—Å—ã' },
    { value: 'scorpio', label: '‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω' },
    { value: 'sagittarius', label: '‚ôê –°—Ç—Ä–µ–ª–µ—Ü' },
    { value: 'capricorn', label: '‚ôë –ö–æ–∑–µ—Ä–æ–≥' },
    { value: 'aquarius', label: '‚ôí –í–æ–¥–æ–ª–µ–π' },
    { value: 'pisces', label: '‚ôì –†—ã–±—ã' }
  ];

  if (!user) return null;

  return (
    <div className="max-w-2xl mx-auto space-y-8">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold gradient-text">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
        <p className="text-purple-200">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</p>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="card p-6 space-y-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <User className="w-8 h-8 text-purple-400" />
            <h2 className="text-xl font-semibold text-white">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          </div>
          
          {!isEditing ? (
            <button
              onClick={() => setIsEditing(true)}
              className="btn-secondary flex items-center space-x-2"
            >
              <Edit3 className="w-4 h-4" />
              <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
            </button>
          ) : (
            <div className="flex space-x-2">
              <button
                onClick={handleSave}
                disabled={updateProfileMutation.isLoading}
                className="btn-primary flex items-center space-x-2"
              >
                <Save className="w-4 h-4" />
                <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
              </button>
              <button
                onClick={handleCancel}
                className="btn-secondary flex items-center space-x-2"
              >
                <X className="w-4 h-4" />
                <span>–û—Ç–º–µ–Ω–∞</span>
              </button>
            </div>
          )}
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* –ò–º—è */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-purple-200">
              –ò–º—è
            </label>
            {isEditing ? (
              <input
                type="text"
                value={editForm.first_name}
                onChange={(e) => setEditForm(prev => ({ ...prev, first_name: e.target.value }))}
                className="input w-full"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              />
            ) : (
              <div className="input bg-purple-900 bg-opacity-30">
                {user.first_name}
              </div>
            )}
          </div>

          {/* –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-purple-200">
              –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            </label>
            {isEditing ? (
              <select
                value={editForm.zodiac_sign}
                onChange={(e) => setEditForm(prev => ({ ...prev, zodiac_sign: e.target.value }))}
                className="select w-full"
              >
                {zodiacSigns.map(sign => (
                  <option key={sign.value} value={sign.value}>
                    {sign.label}
                  </option>
                ))}
              </select>
            ) : (
              <div className="input bg-purple-900 bg-opacity-30 flex items-center space-x-2">
                <span className="text-xl">{getZodiacEmoji(user.zodiac_sign)}</span>
                <span>{getZodiacTitle(user.zodiac_sign)}</span>
              </div>
            )}
          </div>
        </div>

        {!user.zodiac_sign && (
          <div className="bg-yellow-900 bg-opacity-30 border border-yellow-500 border-opacity-50 rounded-lg p-4">
            <p className="text-yellow-200 text-sm">
              ‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!
            </p>
          </div>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="card p-6">
        <h2 className="text-xl font-semibold text-white mb-4 flex items-center space-x-2">
          <Star className="w-6 h-6 text-purple-400" />
          <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
        </h2>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <StatCard
            icon="üîÆ"
            title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
            value={user.predictions_count || 0}
          />
          <StatCard
            icon="üìÖ"
            title="–î–Ω–µ–π —Å –Ω–∞–º–∏"
            value={Math.floor((new Date() - new Date(user.created_at)) / (1000 * 60 * 60 * 24)) || 0}
          />
          <StatCard
            icon="‚≠ê"
            title="XTR –ø–æ—Ç—Ä–∞—á–µ–Ω–æ"
            value={user.predictions_count || 0}
          />
          <StatCard
            icon="üèÜ"
            title="–ü–æ–∑–∏—Ü–∏—è"
            value="‚Äî"
          />
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="card p-6">
        <h2 className="text-xl font-semibold text-white mb-4">
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        </h2>

        <div className="space-y-3 text-sm">
          <div className="flex justify-between items-center">
            <span className="text-purple-200">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
            <span className="text-white font-mono">{user.id}</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-purple-200">Telegram ID:</span>
            <span className="text-white font-mono">{user.telegram_id}</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-purple-200">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
            <span className="text-white">
              {new Date(user.created_at).toLocaleDateString('ru-RU')}
            </span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-purple-200">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
            <span className="text-white">
              {new Date(user.updated_at).toLocaleDateString('ru-RU')}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatCard = ({ icon, title, value }) => (
  <div className="bg-purple-800 bg-opacity-30 rounded-lg p-4 text-center">
    <div className="text-2xl mb-2">{icon}</div>
    <div className="text-2xl font-bold text-white">{value}</div>
    <div className="text-xs text-purple-300">{title}</div>
  </div>
);

export default Profile; 