from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from sqlmodel import Session, create_engine, SQLModel
from contextlib import asynccontextmanager
from typing import List, Optional
import os
from datetime import datetime, timedelta
import uuid

from .models import (
    User, UserCreate, UserPublic, UserUpdate,
    Prediction, PredictionCreate, PredictionPublic,
    Payment, PaymentCreate, PaymentPublic,
    ZodiacSign
)
from .database import get_session, create_db_and_tables
from .auth import get_current_user
from .predictions import generate_prediction_for_sign
from .config import settings

security = HTTPBearer()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    create_db_and_tables()
    yield

app = FastAPI(
    title="üîÆ Prediction Bot API",
    description="API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {"message": "üîÆ Prediction Bot API", "status": "active"}

# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
@app.post("/users/", response_model=UserPublic)
async def create_user(
    user: UserCreate,
    session: Session = Depends(get_session)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = session.query(User).filter(User.telegram_id == user.telegram_id).first()
    if existing_user:
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    db_user = User.model_validate(user)
    db_user.id = str(uuid.uuid4())
    db_user.created_at = datetime.utcnow()
    
    session.add(db_user)
    session.commit()
    session.refresh(db_user)
    
    return db_user

@app.get("/users/me", response_model=UserPublic)
async def get_current_user_profile(
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return current_user

@app.patch("/users/me", response_model=UserPublic)
async def update_user_profile(
    user_update: UserUpdate,
    current_user: User = Depends(get_current_user),
    session: Session = Depends(get_session)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for field, value in user_update.model_dump(exclude_unset=True).items():
        setattr(current_user, field, value)
    
    current_user.updated_at = datetime.utcnow()
    session.add(current_user)
    session.commit()
    session.refresh(current_user)
    
    return current_user

@app.get("/users/rankings", response_model=List[UserPublic])
async def get_user_rankings(
    limit: int = 100,
    session: Session = Depends(get_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫"""
    users = session.query(User).order_by(User.predictions_count.desc()).limit(limit).all()
    return users

# === –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø ===
@app.get("/predictions/", response_model=List[PredictionPublic])
async def get_user_predictions(
    current_user: User = Depends(get_current_user),
    session: Session = Depends(get_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    predictions = session.query(Prediction).filter(
        Prediction.user_id == current_user.id
    ).order_by(Prediction.created_at.desc()).all()
    
    return predictions

@app.get("/predictions/today", response_model=Optional[PredictionPublic])
async def get_today_prediction(
    current_user: User = Depends(get_current_user),
    session: Session = Depends(get_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.utcnow().date()
    
    prediction = session.query(Prediction).filter(
        Prediction.user_id == current_user.id,
        Prediction.prediction_date == today
    ).first()
    
    return prediction

@app.get("/predictions/can-purchase")
async def can_purchase_prediction(
    current_user: User = Depends(get_current_user),
    session: Session = Depends(get_session)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    today = datetime.utcnow().date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    existing_prediction = session.query(Prediction).filter(
        Prediction.user_id == current_user.id,
        Prediction.prediction_date == today
    ).first()
    
    if existing_prediction:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        tomorrow = datetime.combine(today + timedelta(days=1), datetime.min.time())
        time_until_tomorrow = tomorrow - datetime.utcnow()
        
        return {
            "can_purchase": False,
            "reason": "already_purchased_today",
            "next_available_in_seconds": int(time_until_tomorrow.total_seconds())
        }
    
    return {"can_purchase": True}

# === –ü–õ–ê–¢–ï–ñ–ò ===
@app.post("/payments/create-invoice")
async def create_payment_invoice(
    current_user: User = Depends(get_current_user),
    session: Session = Depends(get_session)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ XTR Stars"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    can_purchase = await can_purchase_prediction(current_user, session)
    if not can_purchase["can_purchase"]:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: " + can_purchase["reason"]
        )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è XTR Stars
    payment = Payment(
        id=str(uuid.uuid4()),
        user_id=current_user.id,
        amount=1,  # 1 XTR Star (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–∞)
        currency="XTR",  # Telegram Stars
        status="pending",
        created_at=datetime.utcnow()
    )
    
    session.add(payment)
    session.commit()
    session.refresh(payment)
    
    # –î–ª—è XTR Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token - –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    # Telegram Bot —Å–æ–∑–¥–∞—Å—Ç invoice —Å –ø–æ–º–æ—â—å—é send_invoice()
    return {
        "payment_id": payment.id,
        "amount": payment.amount,
        "currency": payment.currency,
        "status": payment.status
    }

@app.post("/payments/{payment_id}/confirm")
async def confirm_payment(
    payment_id: str,
    current_user: User = Depends(get_current_user),
    session: Session = Depends(get_session)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment = session.query(Payment).filter(
        Payment.id == payment_id,
        Payment.user_id == current_user.id
    ).first()
    
    if not payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if payment.status != "pending":
        raise HTTPException(status_code=400, detail="–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    payment.status = "completed"
    payment.updated_at = datetime.utcnow()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    today = datetime.utcnow().date()
    prediction_text = generate_prediction_for_sign(current_user.zodiac_sign)
    
    prediction = Prediction(
        id=str(uuid.uuid4()),
        user_id=current_user.id,
        zodiac_sign=current_user.zodiac_sign,
        prediction_text=prediction_text,
        prediction_date=today,
        created_at=datetime.utcnow()
    )
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.predictions_count += 1
    current_user.updated_at = datetime.utcnow()
    
    session.add(payment)
    session.add(prediction)
    session.add(current_user)
    session.commit()
    
    session.refresh(prediction)
    
    return {
        "message": "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
        "prediction": prediction
    }

# === –ó–û–î–ò–ê–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ö–ò ===
@app.get("/zodiac-signs")
async def get_zodiac_signs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤"""
    signs = [
        {"name": "aries", "title": "–û–≤–µ–Ω", "emoji": "‚ôà"},
        {"name": "taurus", "title": "–¢–µ–ª–µ—Ü", "emoji": "‚ôâ"},
        {"name": "gemini", "title": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "emoji": "‚ôä"},
        {"name": "cancer", "title": "–†–∞–∫", "emoji": "‚ôã"},
        {"name": "leo", "title": "–õ–µ–≤", "emoji": "‚ôå"},
        {"name": "virgo", "title": "–î–µ–≤–∞", "emoji": "‚ôç"},
        {"name": "libra", "title": "–í–µ—Å—ã", "emoji": "‚ôé"},
        {"name": "scorpio", "title": "–°–∫–æ—Ä–ø–∏–æ–Ω", "emoji": "‚ôè"},
        {"name": "sagittarius", "title": "–°—Ç—Ä–µ–ª–µ—Ü", "emoji": "‚ôê"},
        {"name": "capricorn", "title": "–ö–æ–∑–µ—Ä–æ–≥", "emoji": "‚ôë"},
        {"name": "aquarius", "title": "–í–æ–¥–æ–ª–µ–π", "emoji": "‚ôí"},
        {"name": "pisces", "title": "–†—ã–±—ã", "emoji": "‚ôì"}
    ]
    return signs

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 