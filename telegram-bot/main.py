import asyncio
import logging
import os
from datetime import datetime
from typing import Optional

from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, PreCheckoutQueryHandler, filters, ContextTypes
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('8115467392:AAEBC0OjwqL9Lv80eUu6CsqeNzTWJXh-mbA')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://exampleprediction.web.app')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8000')
PAYMENT_PROVIDER_TOKEN = os.getenv('TELEGRAM_PAYMENT_PROVIDER_TOKEN')

class PredictionBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("prediction", self.prediction_command))
        self.application.add_handler(CommandHandler("rankings", self.rankings_command))
        
        # Callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ü–ª–∞—Ç–µ–∂–∏
        self.application.add_handler(PreCheckoutQueryHandler(self.pre_checkout_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.register_user(user)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Web App
        keyboard = [
            [InlineKeyboardButton(
                "üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                web_app=WebAppInfo(url=WEBAPP_URL)
            )],
            [InlineKeyboardButton("üí´ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data="get_prediction")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rankings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üîÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–µ–¥–∏–∫—à–Ω –ë–æ—Ç!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–≤–æ–µ–º –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞.

‚ú® *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –≤ Telegram Stars (XTR ‚≠êÔ∏è)
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1 XTR Star –∑–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
‚è∞ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:* 1 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–µ–Ω—å

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîÆ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ü—Ä–µ–¥–∏–∫—à–Ω –ë–æ—Ç—É*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/prediction - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/rankings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
2. –ö—É–ø–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞ 1 XTR Star
3. –ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
4. –ñ–¥–∏ –¥–æ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

*–û–ø–ª–∞—Ç–∞:*
–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Telegram Stars (XTR ‚≠êÔ∏è)
–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 XTR –∑–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @your_support_username
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user_data = await self.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        zodiac_emoji = self.get_zodiac_emoji(user_data.get('zodiac_sign'))
        zodiac_title = self.get_zodiac_title(user_data.get('zodiac_sign'))
        
        profile_text = f"""
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: `{user_id}`
üëã –ò–º—è: {user_data['first_name']}
{zodiac_emoji} –ó–Ω–∞–∫: {zodiac_title}
‚≠êÔ∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user_data['predictions_count']}
üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['created_at'][:10]}

–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üí´ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data="get_prediction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            profile_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def prediction_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        await self.handle_get_prediction(update, context)

    async def rankings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        rankings = await self.get_rankings()
        
        if not rankings:
            await update.message.reply_text("üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
            return
        
        rankings_text = "üèÜ *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        
        for i, user in enumerate(rankings[:10], 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            rankings_text += f"{medal} {user['first_name']} - {user['predictions_count']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            rankings_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "get_prediction":
            await self.handle_get_prediction(update, context)
        elif query.data == "profile":
            await self.profile_command(update, context)
        elif query.data == "rankings":
            await self.rankings_command(update, context)
        elif query.data.startswith("buy_prediction_"):
            payment_id = query.data.replace("buy_prediction_", "")
            await self.send_invoice(update, context, payment_id)

    async def handle_get_prediction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        can_purchase = await self.check_can_purchase(user_id)
        
        if not can_purchase['can_purchase']:
            reason = can_purchase.get('reason', 'unknown')
            if reason == 'already_purchased_today':
                next_available = can_purchase.get('next_available_in_seconds', 0)
                hours = next_available // 3600
                minutes = (next_available % 3600) // 60
                
                message = f"‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!\n\n"
                message += f"–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º"
                
                await update.effective_message.reply_text(message)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        user_data = await self.get_user_data(user_id)
        if not user_data or not user_data.get('zodiac_sign'):
            message = """
‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!

–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.effective_message.reply_text(message, reply_markup=reply_markup)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_data = await self.create_payment(user_id)
        if not payment_data:
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await self.send_invoice(update, context, payment_data['payment_id'])

    async def send_invoice(self, update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ XTR Stars"""
        title = "üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"
        description = "–ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"
        payload = f"prediction_payment_{payment_id}"
        currency = "XTR"  # Telegram Stars
        prices = [LabeledPrice("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", 1)]  # 1 XTR Star
        
        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=title,
            description=description,
            payload=payload,
            provider_token="",  # –í—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π –¥–ª—è XTR Stars
            currency=currency,
            prices=prices,
            start_parameter="prediction_payment",
            photo_url=None,  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )

    async def pre_checkout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
        if not query.invoice_payload.startswith("prediction_payment_"):
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id
        payment_id = query.invoice_payload.replace("prediction_payment_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_exists = await self.verify_payment(payment_id)
        if not payment_exists:
            await query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await query.answer(ok=True)

    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        payment = update.message.successful_payment
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ payload
        payment_id = payment.invoice_payload.replace("prediction_payment_", "")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ backend
        success = await self.confirm_payment(payment_id, payment.telegram_payment_charge_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await self.get_today_prediction(update.effective_user.id)
            
            if prediction:
                prediction_text = f"""
üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*

{self.get_zodiac_emoji(prediction['zodiac_sign'])} *{self.get_zodiac_title(prediction['zodiac_sign'])}*

{prediction['prediction_text']}

üìÖ {prediction['prediction_date']}

_–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞!_
                """
                
                await update.message.reply_text(prediction_text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

    # API –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å backend
    async def register_user(self, user):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(f"{API_BASE_URL}/users/", json={
                    "telegram_id": user.id,
                    "first_name": user.first_name,
                    "zodiac_sign": None
                })
                return response.status_code == 201
            except Exception as e:
                logger.error(f"Error registering user: {e}")
                return False

    async def get_user_data(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            try:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ Telegram ID
                response = await client.get(f"{API_BASE_URL}/users/by-telegram-id/{user_id}")
                if response.status_code == 200:
                    return response.json()
                return None
            except Exception as e:
                logger.error(f"Error getting user data: {e}")
                return None

    async def check_can_purchase(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(f"{API_BASE_URL}/predictions/can-purchase", 
                                          headers={"X-Telegram-User-ID": str(user_id)})
                if response.status_code == 200:
                    return response.json()
                return {"can_purchase": False}
            except Exception as e:
                logger.error(f"Error checking purchase: {e}")
                return {"can_purchase": False}

    async def create_payment(self, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(f"{API_BASE_URL}/payments/create-invoice",
                                           headers={"X-Telegram-User-ID": str(user_id)})
                if response.status_code == 200:
                    return response.json()
                return None
            except Exception as e:
                logger.error(f"Error creating payment: {e}")
                return None

    async def verify_payment(self, payment_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(f"{API_BASE_URL}/payments/{payment_id}")
                return response.status_code == 200
            except Exception as e:
                logger.error(f"Error verifying payment: {e}")
                return False

    async def confirm_payment(self, payment_id: str, telegram_charge_id: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(f"{API_BASE_URL}/payments/{payment_id}/confirm", 
                                           json={"telegram_payment_charge_id": telegram_charge_id})
                return response.status_code == 200
            except Exception as e:
                logger.error(f"Error confirming payment: {e}")
                return False

    async def get_today_prediction(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(f"{API_BASE_URL}/predictions/today",
                                          headers={"X-Telegram-User-ID": str(user_id)})
                if response.status_code == 200:
                    return response.json()
                return None
            except Exception as e:
                logger.error(f"Error getting prediction: {e}")
                return None

    async def get_rankings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(f"{API_BASE_URL}/users/rankings")
                if response.status_code == 200:
                    return response.json()
                return []
            except Exception as e:
                logger.error(f"Error getting rankings: {e}")
                return []

    def get_zodiac_emoji(self, sign):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        emojis = {
            'aries': '‚ôà', 'taurus': '‚ôâ', 'gemini': '‚ôä', 'cancer': '‚ôã',
            'leo': '‚ôå', 'virgo': '‚ôç', 'libra': '‚ôé', 'scorpio': '‚ôè',
            'sagittarius': '‚ôê', 'capricorn': '‚ôë', 'aquarius': '‚ôí', 'pisces': '‚ôì'
        }
        return emojis.get(sign, '‚ùì')

    def get_zodiac_title(self, sign):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        titles = {
            'aries': '–û–≤–µ–Ω', 'taurus': '–¢–µ–ª–µ—Ü', 'gemini': '–ë–ª–∏–∑–Ω–µ—Ü—ã', 'cancer': '–†–∞–∫',
            'leo': '–õ–µ–≤', 'virgo': '–î–µ–≤–∞', 'libra': '–í–µ—Å—ã', 'scorpio': '–°–∫–æ—Ä–ø–∏–æ–Ω',
            'sagittarius': '–°—Ç—Ä–µ–ª–µ—Ü', 'capricorn': '–ö–æ–∑–µ—Ä–æ–≥', 'aquarius': '–í–æ–¥–æ–ª–µ–π', 'pisces': '–†—ã–±—ã'
        }
        return titles.get(sign, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Prediction Bot...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            await asyncio.Future()  # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        except KeyboardInterrupt:
            logger.info("Stopping bot...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    bot = PredictionBot()
    asyncio.run(bot.run())

if __name__ == '__main__':
    main() 